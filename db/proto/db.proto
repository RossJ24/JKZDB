syntax = "proto3";

package db;

option go_package = "JKZDB/db/proto";

message UpdateMap {
    map<string, string> updates = 1;
    bool unique = 2;
}

message SetEntryPrepareRequest {
    int64 idempotencyKey = 1;
    string key = 2;
    map<string, string> updates = 3;
    bool unique = 4;
}

message SetEntryPrepareResponse {}

message SetEntryCommitRequest {
    int64 idempotencyKey = 1;
    string key = 2;
    map<string, string> updates = 3;
    bool unique = 4;
}

message SetEntryCommitResponse {}

message SetEntryAbortRequest {
    int64 idempotencyKey = 1;
    bool unique = 2;
}

message SetEntryAbortResponse {}

message SetEntryPrepareBatchRequest {
    int64 idempotencyKey = 1;
    repeated string keys = 2;
    repeated UpdateMap updates = 3;
}

message SetEntryPrepareBatchResponse {}

message SetEntryCommitBatchRequest {
    int64 idempotencyKey = 1;
    repeated string keys = 2;
    repeated UpdateMap updates = 3;
}

message SetEntryCommitBatchResponse {}

message SetEntryAbortBatchRequest {
    int64 idempotencyKey = 1;
}

message SetEntryAbortBatchResponse {}

message GetEntryRequest{
    string query = 1;
    optional string field = 2;
}

message GetEntryResponse{
    map<string, string> entry = 3;
}

service JKZDB {
    rpc SetEntryPrepare(SetEntryPrepareRequest) returns(SetEntryPrepareResponse);

    rpc SetEntryPrepareBatch(SetEntryPrepareBatchRequest) returns(SetEntryPrepareBatchResponse);

    rpc SetEntryCommit(SetEntryCommitRequest) returns(SetEntryCommitResponse);

    rpc SetEntryCommitBatch(SetEntryCommitBatchRequest) returns(SetEntryCommitBatchResponse);

    rpc SetEntryAbort(SetEntryAbortRequest) returns(SetEntryAbortResponse);
    
    rpc SetEntryAbortBatch(SetEntryAbortBatchRequest) returns(SetEntryAbortBatchResponse);
    
    rpc GetEntry(GetEntryRequest) returns(GetEntryResponse);
}