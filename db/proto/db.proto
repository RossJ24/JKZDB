syntax = "proto3";

package db;

option go_package = "JKZDB/db/proto";

message UpdateMap {
    map<string, string> updates = 1;
}
message SetEntryPrepareRequest {
    int64 idempotencyKey = 1;
    string key = 2;
    map<string, string> updates = 3;
}

message SetEntryPrepareResponse {}

message SetEntryCommitRequest {
    int64 idempotencyKey = 1;
    string key = 2;
    map<string, string> updates = 3;
}

message SetEntryCommitResponse {}

message SetEntryAbortRequest {
    int64 idempotencyKey = 1;
}

message SetEntryAbortResponse {}

message SetEntryPrepareRequestBatch {
    int64 idempotencyKey = 1;
    repeated string keys = 2;
    map<string, UpdateMap> entriesToUpdate = 3;
}

message SetEntryPrepareResponseBatch {}

message SetEntryCommitRequestBatch {
    int64 idempotencyKey = 1;
    string key = 2;
    map<string, UpdateMap> entriesToUpdate = 3;
}

message SetEntryCommitResponseBatch {}

message SetEntryAbortRequestBatch {
    int64 idempotencyKey = 1;
}

message SetEntryAbortResponseBatch {}

message GetEntryRequest{
    string query = 1;
    optional string field = 2;
}

message GetEntryResponse{
    map<string, string> entry = 3;
}

// For retrieving the id of a row using an indexed field.
message GetEntryByIndexedFieldRequest{
    string field = 1;
    string key = 2;
}

message GetEntryByIndexedFieldResponse{
    string entry = 1;
}

service JKZDB {
    rpc SetEntryPrepare(SetEntryPrepareRequest) returns(SetEntryPrepareResponse);

    rpc SetEntryCommit(SetEntryCommitRequest) returns(SetEntryCommitResponse);

    rpc SetEntryAbort(SetEntryAbortRequest) returns(SetEntryAbortResponse);

    rpc GetEntry(GetEntryRequest) returns(GetEntryResponse);

    rpc GetEntryByIndexedField(GetEntryByIndexedFieldRequest) returns(GetEntryByIndexedFieldResponse);
}