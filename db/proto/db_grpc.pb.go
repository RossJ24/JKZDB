// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/db.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JKZDBClient is the client API for JKZDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JKZDBClient interface {
	SetEntryPrepare(ctx context.Context, in *SetEntryPrepareRequest, opts ...grpc.CallOption) (*SetEntryPrepareResponse, error)
	SetEntryCommit(ctx context.Context, in *SetEntryCommitRequest, opts ...grpc.CallOption) (*SetEntryCommitResponse, error)
	GetEntryById(ctx context.Context, in *GetEntryByIdRequest, opts ...grpc.CallOption) (*GetEntryByIdResponse, error)
	GetEntryByField(ctx context.Context, in *GetEntryByFieldRequest, opts ...grpc.CallOption) (*GetEntryByFieldResponse, error)
}

type jKZDBClient struct {
	cc grpc.ClientConnInterface
}

func NewJKZDBClient(cc grpc.ClientConnInterface) JKZDBClient {
	return &jKZDBClient{cc}
}

func (c *jKZDBClient) SetEntryPrepare(ctx context.Context, in *SetEntryPrepareRequest, opts ...grpc.CallOption) (*SetEntryPrepareResponse, error) {
	out := new(SetEntryPrepareResponse)
	err := c.cc.Invoke(ctx, "/db.JKZDB/SetEntryPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jKZDBClient) SetEntryCommit(ctx context.Context, in *SetEntryCommitRequest, opts ...grpc.CallOption) (*SetEntryCommitResponse, error) {
	out := new(SetEntryCommitResponse)
	err := c.cc.Invoke(ctx, "/db.JKZDB/SetEntryCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jKZDBClient) GetEntryById(ctx context.Context, in *GetEntryByIdRequest, opts ...grpc.CallOption) (*GetEntryByIdResponse, error) {
	out := new(GetEntryByIdResponse)
	err := c.cc.Invoke(ctx, "/db.JKZDB/GetEntryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jKZDBClient) GetEntryByField(ctx context.Context, in *GetEntryByFieldRequest, opts ...grpc.CallOption) (*GetEntryByFieldResponse, error) {
	out := new(GetEntryByFieldResponse)
	err := c.cc.Invoke(ctx, "/db.JKZDB/GetEntryByField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JKZDBServer is the server API for JKZDB service.
// All implementations must embed UnimplementedJKZDBServer
// for forward compatibility
type JKZDBServer interface {
	SetEntryPrepare(context.Context, *SetEntryPrepareRequest) (*SetEntryPrepareResponse, error)
	SetEntryCommit(context.Context, *SetEntryCommitRequest) (*SetEntryCommitResponse, error)
	GetEntryById(context.Context, *GetEntryByIdRequest) (*GetEntryByIdResponse, error)
	GetEntryByField(context.Context, *GetEntryByFieldRequest) (*GetEntryByFieldResponse, error)
	mustEmbedUnimplementedJKZDBServer()
}

// UnimplementedJKZDBServer must be embedded to have forward compatible implementations.
type UnimplementedJKZDBServer struct {
}

func (UnimplementedJKZDBServer) SetEntryPrepare(context.Context, *SetEntryPrepareRequest) (*SetEntryPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntryPrepare not implemented")
}
func (UnimplementedJKZDBServer) SetEntryCommit(context.Context, *SetEntryCommitRequest) (*SetEntryCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntryCommit not implemented")
}
func (UnimplementedJKZDBServer) GetEntryById(context.Context, *GetEntryByIdRequest) (*GetEntryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryById not implemented")
}
func (UnimplementedJKZDBServer) GetEntryByField(context.Context, *GetEntryByFieldRequest) (*GetEntryByFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntryByField not implemented")
}
func (UnimplementedJKZDBServer) mustEmbedUnimplementedJKZDBServer() {}

// UnsafeJKZDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JKZDBServer will
// result in compilation errors.
type UnsafeJKZDBServer interface {
	mustEmbedUnimplementedJKZDBServer()
}

func RegisterJKZDBServer(s grpc.ServiceRegistrar, srv JKZDBServer) {
	s.RegisterService(&JKZDB_ServiceDesc, srv)
}

func _JKZDB_SetEntryPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEntryPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JKZDBServer).SetEntryPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.JKZDB/SetEntryPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JKZDBServer).SetEntryPrepare(ctx, req.(*SetEntryPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JKZDB_SetEntryCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEntryCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JKZDBServer).SetEntryCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.JKZDB/SetEntryCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JKZDBServer).SetEntryCommit(ctx, req.(*SetEntryCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JKZDB_GetEntryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JKZDBServer).GetEntryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.JKZDB/GetEntryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JKZDBServer).GetEntryById(ctx, req.(*GetEntryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JKZDB_GetEntryByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryByFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JKZDBServer).GetEntryByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.JKZDB/GetEntryByField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JKZDBServer).GetEntryByField(ctx, req.(*GetEntryByFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JKZDB_ServiceDesc is the grpc.ServiceDesc for JKZDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JKZDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.JKZDB",
	HandlerType: (*JKZDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetEntryPrepare",
			Handler:    _JKZDB_SetEntryPrepare_Handler,
		},
		{
			MethodName: "SetEntryCommit",
			Handler:    _JKZDB_SetEntryCommit_Handler,
		},
		{
			MethodName: "GetEntryById",
			Handler:    _JKZDB_GetEntryById_Handler,
		},
		{
			MethodName: "GetEntryByField",
			Handler:    _JKZDB_GetEntryByField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/db.proto",
}
